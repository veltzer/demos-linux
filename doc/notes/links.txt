Various links for linux API examples
====================================
https://github.com/gby/hacks - various examples by Gilad Ben-Yossef

kernel links:
=============
Rusty Russels guide to hacking the kernel:
	http://people.netfilter.org/~rusty/unreliable-guides/kernel-hacking/lk-hacking-guide.html
Andries Brouwer notes about the linux kernel:
	http://www.win.tue.nl/~aeb/linux/lk/lk.html
Mel Gormans book on memory management in the kernel:
	https://www.kernel.org/doc/gorman/pdf/understand.pdf
Linux gate and fast system calls:
	http://www.trilithium.com/johan/2005/08/linux-gate/
Memory mgmt:
	http://linux-mm.org/
embedded linux:
	http://elinux.org/Main_Page
Rovert Love's book:
	http://www.makelinux.net/books/lkd2
How to write kernel modules:
	http://www.tldp.org/LDP/lkmpg/2.6/html/index.html

Memory reordering links:
========================
http://peeterjoot.wordpress.com/2009/12/04/intel-memory-ordering-fence-instructions-and-atomic-operations/

Sound links:
============
Various linux sound APIs:
	http://0pointer.de/blog/projects/guide-to-sound-apis.html

STL links:
==========
lists in STL:
	http://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html#LIST

ACE links:
==========
examples from the ACE documentation:
	http://www.dre.vanderbilt.edu/~schmidt/DOC_ROOT/ACE/examples/

Aspect oriented for C/C++ links:
================================
https://sites.google.com/a/gapp.msrg.utoronto.ca/aspectc/
http://www.aspectc.org/Documentation.5.0.html

Networking links:
=================
http://www.mjmwired.net/kernel/Documentation/networking/packet_mmap.txt
http://yusufonlinux.blogspot.co.il/2010/11/raw-socket-in-linux.html
http://yusufonlinux.blogspot.co.il/2010/11/data-link-access-and-zero-copy.html

malloc links:
=============
Hoard links:
	http://www.hoard.org/

openmp links:
=============
info libgomp-4.6
http://gcc.gnu.org/onlinedocs/libgomp/
http://en.wikipedia.org/wiki/OpenMP
http://openmp.org/wp
/usr/lib/gcc/i686-linux-gnu/4.6.1/include/omp.h
http://www.openmp.org/mp-documents/OpenMP3.0-SummarySpec.pdf
http://www.akkadia.org/drepper/summit08-openmp.pdf

security links:
===============
http://en.wikipedia.org/wiki/PaX (security patch to the linux kernel)

alsa links:
===========
http://www.alsa-project.org/~tiwai/writing-an-alsa-driver/
http://free-electrons.com/doc/embedded_linux_audio.pdf

manual pages:
=============
http://linux-man-pages.blogspot.co.il/
https://www.kernel.org/pub/linux/docs/man-pages/
http://man7.org/linux/man-pages/index.html
http://manpages.ubuntu.com/

gdb:
====
http://www.openlogic.com/wazi/bid/336594/Advanced-GDB-tips-and-tricks
http://www.openlogic.com/wazi/bid/351471/more-gdb-tips-and-tricks

pretty printers for gdb:
http://choorucode.com/2014/07/17/how-to-enable-pretty-printing-for-stl-in-gdb/
https://sourceware.org/gdb/wiki/STLSupport

A good tutorial about gcc with some very nice advanced features:
http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html

lttng:
======
https://lttng.org

GOT and PLT:
============
https://www.technovelty.org//linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html

pid 1, upstart, sysvinit, systemd:
==================================
http://0pointer.de/blog/projects/systemd.html

real time:
==========
https://www.osadl.org/QA-Farm-Realtime.qa-farm-about.0.html
http://free-electrons.com/blog/elce-2011-videos/
https://rt.wiki.kernel.org/index.php/Main_Page
http://www.litmus-rt.org

perf:
=====
perf events explanation:
http://web.eecs.utk.edu/~vweaver1/projects/perf-events/
perf wiki
https://perf.wiki.kernel.org/
perf extensive resource:
http://www.brendangregg.com/perf.html

oprofile:
=========
Installing oprofile
- On ubuntu:
	sudo apt-get install oprofile oprofile-gui
- documentation is in /usr/share/doc/oprofile/oprofile.html

oprofile documentation
http://oprofile.sourceforge.net/docs/

ELF and size of executable:
===========================
http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html
http://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/

Assembly programming:
=====================
http://download.savannah.gnu.org/releases/pgubook/
http://asm.sourceforge.net/resources.html#docs
http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html
putting and getting registers: $LINUX_SOURCE/include/uapi/asm/gcc_intrin.h
https://cs.nyu.edu/courses/fall11/CSCI-GA.2130-001/x64-intro.pdf

Object oriented in the C language:
==================================
http://www.cs.rit.edu/~ats/books/ooc.pdf
http://stackoverflow.com/questions/351733/can-you-write-object-oriented-code-in-c/
http://stackoverflow.com/questions/415452/object-orientation-in-c

threads vs processes:
=====================
http://elinux.org/images/1/1c/Ben-Yossef-GoodBadUgly.pdf
http://free-electrons.com/pub/video/2009/elce/elce2009-ben-yossef-threads-processes.ogv

references manuals:
===================
Lots of reference manuals (for intel processors, LSB and more) at the linux foundation site:
http://refspecs.linux-foundation.org/

debugger implementation:
========================
http://mohit.io/blog/software-breakpoints/
http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1
http://stackoverflow.com/questions/859023/how-are-debugger-breakpoints-implemented-efficiently

futex/Futex:
============
http://locklessinc.com/articles/futex_cheat_sheet

systems progreamming:
=====================
http://www.tldp.org/LDP/lpg/index.htmw

iouring:
========
https://github.com/shuveb/loti-examples
