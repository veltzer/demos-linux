fixes
=====
I no longer use "libprocps" which is deprecated and so I need to write some code in the places where it used to be.
this includes filling in some functions in src/include/proc_utils.h

websites to get ideas from
==========================
	https://github.com/gby/hacks
	http://pramode.net/articles/lfy/ptrace/pramode.html
	http://man7.org/tlpi/code
	http://preshing.com
	http://eli.thegreenplace.net
	http://blog.regehr.org
	http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
	http://www.csn.ul.ie/~mel/ (huge pages info)
	http://www.linuxprogrammingblog.com/
	http://gjcarneiro.blogspot.co.il/2010/10/c-stl-containers-memory.html
	http://publicclu2.blogspot.co.il/
	http://www.coranac.com/documents/working-with-bits-and-bitfields/
	http://stackoverflow.com/questions/1490092/c-c-force-bit-field-order-and-alignment
	http://stackoverflow.com/questions/2611764/can-i-use-a-binary-literal-in-c-or-c
	http://stackoverflow.com/questions/6719339/determining-if-a-system-uses-big-endian-or-little-endian-using-c
	http://bartoszmilewski.com
	https://www.technovelty.org
	http://www.wienand.org/junkcode
	http://ewontfix.com
	http://blog.plenz.com

examples to add
===============
- add example of using "usefafultfd" to monitor page faults from user space.
	https://man7.org/linux/man-pages/man2/userfaultfd.2.html
- get another example for epoll from Ilan Smith of Nvidia from here:
	https://github.com/ilansmith/pipe_trigger/blob/master/wakeup.c
- do example of -fsanitize
- write example that shows how
	-fstack-protector -fstack-protector-all -fstack-protector-strong -fstack-protector-explicit
	protect your code.
- write example of how to turn the glibc malloc library into "rt"...:)
	then write slides about it in the 'slides' repo.
	The simple solution: wrap calls to malloc with locks with priority
	inheritance. That would give lously performance but will at least
	not block for time slices.
	What about the current->mm->mmap_sem which does not handle
	priority inversion? That is not a problem since we wrap it
	with pthread mutexes which are priority inverted.
- do example of the 'rdtscp' machine instruction which is supposed to
	be superior to the 'rdtsc' instruction.
	See the intel paper on micro measurements for details.
- demo the new system call 'membarrier'.
- do example of setcap (which I do not have as of yet).
- find out why rdtsc doesnt work well on my multi core machine.
	fix it.
- write some few stream examples.
- add another way of program disassembling itself:
	use __file__ for the program to compile itself using
	gcc only to assembly and dump the output to the screen.
	We have to find a way to pass the flags so that we would know how to compile.
	create an example specifically for disassembly.
- add examples of how to pretty print structures in gdb.
- add examples of doing chattr and lsattr in straight C.
	write a presentation showing how chattr can be used for security.
- adapt an example like in plenz:
	http://blog.plenz.com/2014-04/so-you-want-to-write-to-a-file-real-fast.html
- do a standalone example of using -flto and -fwhole-program to compile a full library or program
	in one go.
- example of using clone(2) directly.
- do a demo of tracing user space apps using the lttng ust tracer.
	more info is here: https://lttng.org/
- demo the use of MADV_DONTDUMP for determining what will go into a core dump from within a process.
- demo the user of the following gcc flags:
	-fsanitize=address
	-fsanitize=thread
- demo the use of open_by_handle_at, name_to_handle_at.
	I don't have manual pages for these because ubuntu carries old manual pages.
	http://man7.org/linux/man-pages/man2/open_by_handle_at.2.html
- examine the gcc -fwrapv flag. do an example.
- https://github.com/gby/hacks/blob/master/thread_stack.c
- #pragma once
- add standalone example of how to strip debug info from intel compiler builds.
- get examples of bad C code from "Some Dark Corners of C.pptx" (have it in doc/external).
- implement a fair spin lock like this in user space:
	http://lwn.net/Articles/267968
	compare to the fairness of the regular spin lock of pthreads.
- show use of /usr/include/demangle.h and libelf like in perf(1).
- show how to implement tail -f using inotify.
- show timing using times(2) instead of gettimeofday()
	do slideshow about timing your code and discuss advantages
	and disadvantages of each approach.
- do an example of using /dev/rtc and /dev/hpet...
- do a standalone example of lto optimizations (man gcc/search for lto).
- do an example of hugetlbfs.
- core dump example: show how an application can dump its own core
	and continue running (gcore on the cmd line, sending itself a signal,
	running the right function).
- give an example of a binary that accesses it's own symbols by name.
	ld_ functions with NULL.
- do a user space example that compares various ways of getting a time stamp
	(rdtsc, gettimeofday, getclock, ...)
- do a user space program that measures the rdtsc progress vs time
	and compares it to the values taken from the cpufreq library.
- do an example that links dlls together and create a "mega dll".
- do an example that links object files + a bunch of dlls into a "exe + dlls in one file" package.
	This way this exe can have backtrace capability with good symbol names. Demo it.
- do a demo of using the rtc in an application.
	demo the accuracy of those sleeps as compared to an application using a regular clock
	show that when using the RTC the interrupts are coming in (/etc/interrupts) not via
	the timer interrupts but rather through the RTC line...
- add a demo about how to catch this exception from regular C code using signal and
	sigaction and show what can be done about it (c level).
- example of how to raise exceptions on all system calls.
	C++ wrapper for all system calls.
- examples of debugging malloc stuff:
	showing statistics of malloc,
	hooking into the malloc free hooks
	replacing the malloc library.
- expand the example BreakOut.cc to show that you can break out of other system calls too (for example shmget).
- write an example using futexes (bare futexes).
- write an example that demostrates priorities.
	a. Show an example showing different nice levels.
	b. Show an example showing priority in the same nice level.
	c. Show running a real time process.
	d. Show inversion of priority.
- write an example using NTPL and not posix threads.
- examples using NTPL.
- starting a thread in suspended mode (pthread or NTPL).
- show code of mutexes in pthread with timeout.
- application which receives a SIGTERM and in the sig handler
	marks a boolean value for the main application to check.
	The main application runs in a loop and checks the boolean
	variable regularly and stops it's work once the signal arrives.
- application which generates a SIGSEGV by doing some illegal
	memory access. The application handles this signal in it's
	own code and then calls the default handler (which creates
	a core dump).
- application which shows how to pass extra information using
	a signal handler.
- application which generates an FPE, then does not core dump
	but rather continues processing. Show how to know where the FPE
	came from (extra information?) and continue from afterwards.
- Show combinations of signal handlers and C++ exceptions. Where
	do they conflict and where do they match.
- profile how long it takes to setup a timer from user space.
	(this is for the userspace guys - do an example).
- show how to break from a blocking sys call in user space using a signal.
	show how to do this using a timer thus turning each sys call to timed.
	show that the wakeup is pretty near the expected time (rdtsc).
- do example of fifo and priorities in pthreads.
- add example of a process doing a fork and the child (or parent) giving themselves
	a different name so that they would appear differently in the process table
	(show the process table from the program). - I think I already have a sample like this.
- creating temp files correctly:
	mkdtemp(3), mktemp(3), tempnam(3), tmpfile(3), tmpnam(3)
	talk about the security issues involved in these.
	there is already one example of mine which works with temp files.
- do a demo of two processes syncing via futex in shared memory (c++ stuff).
- do a demo of using compare and set to sync two processes (c++ stuff).
- do a demo of what you can do with an executable stack.
	use the "-z execstack" flag to the linker. I think you can put it directly
	on the gcc command line...
- demo the use of "setarch(8)" to create a shell where applications run differently
	(with ASLR disabled, or whatever...)
- do a demo of getrandom(2). A new syscall to get random numbers in 3.17.
	https://lwn.net/Articles/605828/
	https://lwn.net/Articles/606141/
- do a demo of lockdep library.
	http://lwn.net/Articles/536363/
- do a demo of glob and regex functions of glibc.
- demo of O_TMPFILE as argument to open(2) to create temporary files.
