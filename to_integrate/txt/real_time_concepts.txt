




	



						Your code in user space
		something    the kernel		starts handing the event	You finish
		important    handles
		happens      the event
			|       |			|			|
		---------------------------------------------------------------------> time

- P2 is critical and listening on port 8080
- Before everything startys process P1 is running which is not so critical.
- A message comes in through the network interface to port 8080. 
- The kernel accepts the message via an interrupt handler (piece of code in the kernel that responds to
	hardware events)
- Now the kernel understands that we need to wakeup p2 (critical process) because p2 is the one listening
	on that particular port.
- In a non-real time patched kernel the kernel will let P1 continue to run and just put P2 on the running of processes.
	So P2 will run, but not now! (It will wait until P1 finished, and maybe even P3 and P4)
- In a real time kernel, the kernel will immediately stop P1, and transfer control to P2
